public class MyTest1 extends ClassLoader{
    private String classLoaderName;
    private String fileSuffix=".class";
    public MyTest1(String classLoaderName){
        super();
        this.classLoaderName = classLoaderName;
    }
    public MyTest1(String classLoaderName,ClassLoader parent){
        super(parent);
        this.classLoaderName = classLoaderName;
    }

    @Override
    protected Class<?> findClass(String name) throws ClassNotFoundException {
        byte[] b = this.loadClassData(name);
        System.out.println("---------------");

        return this.defineClass(name,b,0,b.length);
    }

    private byte[]  loadClassData(String name ){
        InputStream is = null;
        byte[] data = null;
        ByteArrayOutputStream baos =null;

        try {
            //name =name.replace(".","/");
            is = new FileInputStream(new File(name+this.fileSuffix));
            baos = new ByteArrayOutputStream();
            int ch ;
            while (-1 != (ch=is.read())){
                baos.write(ch);
            }
            data = baos.toByteArray();

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                is.close();
                baos.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return data;
    }
    @Override
    public String toString() {
        return "["+this.classLoaderName+"]";
    }

    public  static  void test1(ClassLoader classLoader) throws  Exception{
        Class<?> clazz = classLoader.loadClass("AAA");
        Object o = clazz.newInstance();
        System.out.println(o);
    }

    public static void main(String[] args) throws  Exception{
        MyTest1 myTest1 = new MyTest1("loader1");
        test1(myTest1);
        System.out.println(myTest1);
        System.out.println(myTest1.getParent());

    }