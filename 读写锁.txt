public class Main {
    //读写锁
    private volatile  Map<String,Object> map = new HashMap<>();
    private ReentrantReadWriteLock rRWLock = new ReentrantReadWriteLock();
    public  void  writeLock(String key,Object value) {
        rRWLock.writeLock().lock();
        try {
            System.out.println(Thread.currentThread().getName()+"开始写入");
            TimeUnit.MILLISECONDS.sleep(300);
            map.put(key,value);
            System.out.println(Thread.currentThread().getName()+"写入完成");
        } catch (InterruptedException e) {
            e.printStackTrace();
        }finally {
            rRWLock.writeLock().unlock();
        }

    }
    public void readLock(String key) {
        rRWLock.readLock().lock();

        try {
            System.out.println(Thread.currentThread().getName()+"开始读取");
            TimeUnit.MILLISECONDS.sleep(300);
            Object o = map.get(key);
            System.out.println(Thread.currentThread().getName()+"读取完成"+o);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }finally {
            rRWLock.readLock().unlock();
        }

    }
    public static void main(String[] args) {
        Main main = new Main();
        for (int i=0;i<5;i++){
            final int tempInt=i;
            new Thread(()->{
                main.writeLock(tempInt+"",tempInt+"");
            },String.valueOf(i)).start();
        }
        for (int i=0;i<5;i++){
            final int tempInt=i;
            new Thread(()->{
                main.readLock(tempInt+"");
            },String.valueOf(i)).start();
        }

    }