import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicReference;
//П
public class Main {
    //зда§Ыј
    AtomicReference<Thread> atomicReference = new AtomicReference<>();


    public void mylock(){
        Thread thread = Thread.currentThread();
        System.out.println(Thread.currentThread().getName()+"come in");
        while(!atomicReference.compareAndSet(null,thread)){

        }

    }
    public void myUnlock(){
        Thread thread = Thread.currentThread();
        atomicReference.compareAndSet(thread,null);
        System.out.println(Thread.currentThread().getName()+"out");
    }

    public static void main(String[] args) {
        Main main = new Main();
        new Thread(()->{
            main.mylock();
            try {
                Thread.sleep(5000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            main.myUnlock();
        },"aa").start();
        try {
            TimeUnit.SECONDS.sleep(1);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        new Thread(()->{
            main.mylock();
            main.myUnlock();
        },"bb").start();
}
